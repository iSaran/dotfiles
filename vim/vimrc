set nocompatible              " be iMproved, required
filetype off                  " required

set encoding=utf-8

""""""""""""""""""""""""""""
""" Plugin Configuration """
""""""""""""""""""""""""""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Raimondi/delimitMate'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'rhysd/vim-clang-format'
" Plugin 'fatih/vim-go'  " Commented out due to a warning for the version of
" vim. Uncomment after testing. Anyways needed only for GoLang development
Plugin 'jreybert/vimagit'
" Plugin 'rakr/vim-one'
" Plugin 'Yggdroot/indentLine'
" Plugin 'xuhdev/vim-latex-live-preview'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'francoiscabrol/ranger.vim'

" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"filetype plugin on
" Put your non-Plugin stuff after this line

" Airline Plugin options
let g:airline_powerline_fonts=1
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''
let g:airline_theme='luna'
let g:airline#extensions#tabline#enabled = 1 "Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' "Show just the filname

" Ctrl-P configurations
let g:ctrlp_map = '<c-p>'

" Clang configurations
let g:clang_format#command = 'clang-format-3.6'

" Remove the leader+f binding for ranger in order to use leader+n
let g:ranger_map_keys = 0


""""""""""""""""""""""""
""" General Settings """
""""""""""""""""""""""""

set t_Co=256 "set colors to 256-value
set wrap "wrap long lines
set linebreak "Break up the words in long lines for wrapping
set nolist "Needed for the above command (the linebreak)  to work properly
set number "show line numbers
set numberwidth=3 "change width of line numbers
set ruler "show ruler in the bottom right
set showcmd "display a commad before it finished, helpful while learing
set incsearch "enable incremental search (after pressing /)
set hlsearch "enable highlighting in search
set cursorline "highlight current line

"Enable colorscheme
syntax on
colorscheme 256-jungle
"colorscheme sourcerer

" Settings for the status line
"set laststatus=2 statusline=%f\ %m\ %{&fileencoding?&fileencoding:&encoding}
"set statusline=%<\ %n:%f\ %m%r%y%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)
set laststatus=2 "Show status line
set statusline=%f "Show the name of the file
set statusline+=\ -\  "Seperator
set statusline+=Filetype:
set statusline+=%y "Filetype
set statusline+=\ -\
set statusline+=Line:
set statusline+=%l "Current line
set statusline+=/
set statusline+=%L "Total Lines
set statusline+=\ -\
set statusline+=Encoding:
set statusline+=%{&fileencoding?&fileencoding:&encoding}

"Show the line breaks as a dash
set list
set listchars=tab:▸\ ,eol:¬

"Change color when you change modes
au InsertEnter * hi StatusLine term=reverse ctermbg=39 ctermfg=53
au InsertLeave * hi StatusLine term=reverse ctermbg=None ctermfg=39

"Save the folds when you quit the file
"autocmd BufWinLeave *.* mkview
"autocmd BufWinEnter *.* silent loadview

" Set the leader char. The leader is used in a variaty of shortcuts
let mapleader = ','

"""""""""""""""""""""""""
""" Advanced Settings """
"""""""""""""""""""""""""

" Function that toggles between keymaps (greek and english)
set keymap=
function ToggleKeymap()
  if &keymap ==# "greek_utf-8"
    set keymap=
    echo "Switched to english"
  else
    set keymap=greek_utf-8
    echo "Switched to greek"
  endif
endfunction
nnoremap <Leader>l  :call ToggleKeymap()<CR>
inoremap <Leader>l  <Esc>:call ToggleKeymap()<CR>a

"Enable wrapping by \w
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal display+=lastline
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction

" Set relative number and also use
" function that can toggles between relative and absolute
set relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <Leader>r :call NumberToggle()<CR>

" Vim will keep the indetation when you go to the next line
set autoindent

" Recognise launch files as xml files
au BufRead,BufNewFile *.launch set filetype=xml
au BufRead,BufNewFile *.sdf set filetype=xml
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.cls set filetype=tex
"autocmd BufNewFile,BufRead *.md set filetype=markdown

"tab equals 2 spaces
set tabstop=2
set expandtab

"tabs for files and tab for python files
autocmd FileType * set tabstop=2|set shiftwidth=2|set expandtab
autocmd FileType cpp set tabstop=2|set shiftwidth=2|set expandtab
autocmd FileType xml set tabstop=2|set shiftwidth=2|set expandtab
autocmd FileType python set tabstop=4|set shiftwidth=4|set expandtab
au BufEnter *.py set ai sw=4 ts=4 sta et fo=croql

"map f7 f8 to switch between tabs
map <F7> :tabp <CR>
map <F8> :tabn <CR>

map <F6> "+p
map <F5> "+y

"Highlight characters tha go beyond the 80th column in markdown files
"augroup vimrc_autocmds
"  autocmd FileType markdown highlight OverLength ctermfg=red ctermbg=None guibg=#592929
"  autocmd FileType markdown match OverLength /\%81v.*/
"augroup END


" augroup vimrc_autocmds
"   autocmd FileType text highlight OverLength ctermfg=red ctermbg=None guibg=#592929
"   autocmd FileType text match OverLength /\%81v.*/
" augroup END

" Add leader mappings
nnoremap <Leader>fs :set foldmethod=syntax<CR>
"nnoremap <Leader>n :NERDTreeToggle<CR>
map <leader>n :Ranger<CR>
nnoremap <Leader>gd :Gvdiff<CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>Y "+Y<CR>
nnoremap <Leader>y "+y<CR>
nnoremap <Leader>p "+p<CR>
nnoremap <Leader>P "+P<CR>
nnoremap <Leader>k :bp<CR>
nnoremap <Leader>j :bn<CR>
nnoremap <Leader>c :bd<CR>
nnoremap <Leader>c! :bd!<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>cf :ClangFormat<CR>
nnoremap <Leader>v :edit $MYVIMRC<CR>
nnoremap <Leader>; ,
command! -nargs=1 Mygrep vimgrep /<args>/gj ./**/* | cw
nnoremap <leader>s :Mygrep 

set hidden "hidden buffers, now u dont need to write a buffer if you want to change to another.

""""""""""""""""""""""""""""""""""""""
""" Specific to filetype shortcuts """
""""""""""""""""""""""""""""""""""""""

" Latex shortcuts
let g:tex_flavor = "latex"
inoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
map <Space><Tab> <Esc>/<++><Enter>"_c4l
autocmd FileType tex inoremap <Leader>bf \textbf{}<Space><++><Esc>T{i
autocmd FileType tex inoremap <Leader>bm \bm{}<Space><++><Esc>T{i
autocmd FileType tex inoremap <Leader>bb \mathbb{}<Space><++><Esc>T{i
autocmd FileType tex inoremap <Leader>cal \mathcal{}<Space><++><Esc>T{i
autocmd FileType tex inoremap <Leader>it \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap <Leader>en \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
autocmd FileType tex inoremap <Leader>li <Enter>\item<Space>
autocmd FileType tex inoremap <Leader>em \emph{}<Space><++><Esc>T{i
autocmd FileType tex inoremap <Leader>sum \sum_{}^{<++>}<Space><++><Esc>2F{a
autocmd FileType tex inoremap <Leader>frac \frac{}{<++>}<Space><++><Esc>2F{a
autocmd FileType tex inoremap <Leader>chap \chapter{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap <Leader>sec \section{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap <Leader>ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap <Leader>sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
autocmd FileType tex inoremap <Leader>m $$<Space><++><Esc>2T$i
autocmd FileType tex inoremap <Leader>eq \begin{equation}<Enter>\end{equation}<Enter><Enter><++><Esc>3ko
autocmd FileType tex inoremap <Leader>cas \begin{cases}<Enter>\end{cases}<Enter><Enter><++><Esc>3ko
autocmd FileType tex inoremap <Leader>fig \begin{figure}[!h]<Enter>\centering<Enter>\includegraphics[width=\textwidth]{<++>}<Enter>\caption{<++>}<Enter>\label{<++>}<Enter>\end{figure}<Esc>3k0f=a

" XML shortcuts. Mainly for ROS xmls like package.xml
autocmd FileType xml inoremap <Leader>bu <build_depend></build_depend><Esc>F<i
autocmd FileType xml inoremap <Leader>ru <run_depend></run_depend><Esc>F<i

" Markdown shortcuts
autocmd FileType markdown inoremap <Leader>bash ```bash<Enter>```<Esc>O
autocmd FileType markdown inoremap <Leader>cpp ```cpp<Enter>```<Esc>O
autocmd FileType markdown inoremap <Leader>sec #<Enter><Enter><++><Esc>kkA<Space>
autocmd FileType markdown inoremap <Leader>ssec ##<Enter><Enter><++><Esc>kkA<Space>
autocmd FileType markdown inoremap <Leader>sssec ###<Enter><Enter><++><Esc>kkA<Space>
autocmd FileType markdown inoremap <Leader>url [](<++>)<Space><++><Esc>F[a
autocmd FileType markdown inoremap <Leader>bf ****<Space><++><Esc>3F*a

" C++ shortcuts
autocmd FileType cpp inoremap <Leader>c std::cout<Space><<<Space><<<Space>std::endl;<Esc>3F<a<Space>
autocmd FileType cpp inoremap <Leader>v std::cout<Space><<<Space>": "<<<Space><++><Space><<<Space>std::endl;<Esc>3F:i
autocmd FileType cpp inoremap <Leader>e std::cout<Space><<<Space>"======================================================="<Space><<<Space>std::endl;<Esc>2F"a:<Space><Esc>F:i
autocmd FileType cpp inoremap <Leader>i #include<Space><><Esc>F<a
autocmd FileType cpp inoremap <Leader>m \f$\f$<Space><++><Esc>2F$a
autocmd FileType cpp inoremap <Leader>d <Esc>O/**<CR>\brief<CR>/<Esc>kA<Space>
" Map Alt to movement keys in order to move in wrapped lines
vmap <C-j> gj
vmap <C-k> gk
vmap <C-0> g0
nmap <C-j> gj
nmap <C-k> gk
nmap <C-0> g0

" White spaces. Highlight and shortcut for remove trailing whitespaces
highlight TrailingWhitespace ctermbg=red guibg=red
match TrailingWhitespace /\s\+$/
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" White spaces. Highlight and shortcut for remove multiple whitespaces between
" words in latex documents
highlight MultipleWhitespace ctermbg=red guibg=red
autocmd FileType tex match MultipleWhitespace /\(^\s*\)\@<!\s\s\+\|\s\+$/
nnoremap <Leader>rmw :%s/\(^\s*\)\@<!\s\s\+\\|\s\+$/<Space>/g<CR>
